package net.geoprism.registry.jobs;

@com.runwaysdk.business.ClassSignature(hash = -122709135)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ImportHistory.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ImportHistoryBase extends net.geoprism.registry.jobs.GPRJobHistory
{
  public final static String CLASS = "net.geoprism.registry.jobs.ImportHistory";
  public final static java.lang.String IMPORTFILE = "importFile";
  public final static java.lang.String IMPORTEDRECORDS = "importedRecords";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -122709135;
  
  public ImportHistoryBase()
  {
    super();
  }
  
  public com.runwaysdk.system.VaultFile getImportFile()
  {
    if (getValue(IMPORTFILE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.VaultFile.get(getValue(IMPORTFILE));
    }
  }
  
  public String getImportFileOid()
  {
    return getValue(IMPORTFILE);
  }
  
  public void validateImportFile()
  {
    this.validateAttribute(IMPORTFILE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getImportFileMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.jobs.ImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(IMPORTFILE);
  }
  
  public void setImportFile(com.runwaysdk.system.VaultFile value)
  {
    if(value == null)
    {
      setValue(IMPORTFILE, "");
    }
    else
    {
      setValue(IMPORTFILE, value.getOid());
    }
  }
  
  public void setImportFileId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(IMPORTFILE, "");
    }
    else
    {
      setValue(IMPORTFILE, oid);
    }
  }
  
  public Long getImportedRecords()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(IMPORTEDRECORDS));
  }
  
  public void validateImportedRecords()
  {
    this.validateAttribute(IMPORTEDRECORDS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getImportedRecordsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.jobs.ImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(IMPORTEDRECORDS);
  }
  
  public void setImportedRecords(Long value)
  {
    if(value == null)
    {
      setValue(IMPORTEDRECORDS, "");
    }
    else
    {
      setValue(IMPORTEDRECORDS, java.lang.Long.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ImportHistoryQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ImportHistoryQuery query = new ImportHistoryQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ImportHistory get(String oid)
  {
    return (ImportHistory) com.runwaysdk.business.Business.get(oid);
  }
  
  public static ImportHistory getByKey(String key)
  {
    return (ImportHistory) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static ImportHistory lock(java.lang.String oid)
  {
    ImportHistory _instance = ImportHistory.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static ImportHistory unlock(java.lang.String oid)
  {
    ImportHistory _instance = ImportHistory.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
