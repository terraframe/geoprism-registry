package net.geoprism.registry.jobs;

@com.runwaysdk.business.ClassSignature(hash = -1181073435)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ParentReferenceProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ParentReferenceProblemBase extends net.geoprism.registry.jobs.ValidationProblem
{
  public final static String CLASS = "net.geoprism.registry.jobs.ParentReferenceProblem";
  public final static java.lang.String CONTEXT = "context";
  public final static java.lang.String LABEL = "label";
  public final static java.lang.String PARENTCODE = "parentCode";
  public final static java.lang.String TYPECODE = "typeCode";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -1181073435;
  
  public ParentReferenceProblemBase()
  {
    super();
  }
  
  public String getContext()
  {
    return getValue(CONTEXT);
  }
  
  public void validateContext()
  {
    this.validateAttribute(CONTEXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getContextMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.jobs.ParentReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(CONTEXT);
  }
  
  public void setContext(String value)
  {
    if(value == null)
    {
      setValue(CONTEXT, "");
    }
    else
    {
      setValue(CONTEXT, value);
    }
  }
  
  public String getLabel()
  {
    return getValue(LABEL);
  }
  
  public void validateLabel()
  {
    this.validateAttribute(LABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.jobs.ParentReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LABEL);
  }
  
  public void setLabel(String value)
  {
    if(value == null)
    {
      setValue(LABEL, "");
    }
    else
    {
      setValue(LABEL, value);
    }
  }
  
  public String getParentCode()
  {
    return getValue(PARENTCODE);
  }
  
  public void validateParentCode()
  {
    this.validateAttribute(PARENTCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getParentCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.jobs.ParentReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PARENTCODE);
  }
  
  public void setParentCode(String value)
  {
    if(value == null)
    {
      setValue(PARENTCODE, "");
    }
    else
    {
      setValue(PARENTCODE, value);
    }
  }
  
  public String getTypeCode()
  {
    return getValue(TYPECODE);
  }
  
  public void validateTypeCode()
  {
    this.validateAttribute(TYPECODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getTypeCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.jobs.ParentReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(TYPECODE);
  }
  
  public void setTypeCode(String value)
  {
    if(value == null)
    {
      setValue(TYPECODE, "");
    }
    else
    {
      setValue(TYPECODE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ParentReferenceProblem get(String oid)
  {
    return (ParentReferenceProblem) com.runwaysdk.business.Business.get(oid);
  }
  
  public static ParentReferenceProblem getByKey(String key)
  {
    return (ParentReferenceProblem) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static ParentReferenceProblem lock(java.lang.String oid)
  {
    ParentReferenceProblem _instance = ParentReferenceProblem.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static ParentReferenceProblem unlock(java.lang.String oid)
  {
    ParentReferenceProblem _instance = ParentReferenceProblem.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
